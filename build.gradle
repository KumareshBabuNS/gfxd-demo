apply plugin: 'base' // To add "clean" task to the root project.

subprojects {
  apply from: rootProject.file('common.gradle')
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
  title = 'All modules'
  destinationDir = new File(project.buildDir, 'merged-javadoc')

  // Note: The closures below are executed lazily.
  source {
    subprojects*.sourceSets*.main*.allSource
  }
  classpath.from {
    subprojects*.configurations*.compile*.copyRecursive({
      !(it instanceof ProjectDependency);
    })*.resolve()
  }
}

configurations {
  appJars
}

dependencies {
  appJars project(path: ":gfxd-demo-loader", configuration: "loaderJar")
  appJars project(path: ":gfxd-demo-aeq-listener", configuration: "aeqListenerJar")
}

def gfxdWorkDir = new File("server1")
def gfxd = GFXD_HOME + "/bin/gfxd"
def appJars = configurations.appJars.collect { it }
def flavor = project.hasProperty("flavor") ? project.properties["flavor"] : "hadoop"

task stopServer(type: Exec) {
  ignoreExitValue = true
  commandLine gfxd, "server", "stop", "-dir=" + gfxdWorkDir
}

task startServer(dependsOn: [stopServer, ":gfxd-demo-loader:jar", ":gfxd-demo-aeq-listener:jar"], type: Exec) {
  doFirst {
    gfxdWorkDir.deleteDir()
    gfxdWorkDir.mkdir()
  }

  ignoreExitValue = true
  commandLine gfxd, "server", "start",
      "-dir=" + gfxdWorkDir,
      "-heap-size=2G",
      "-server-groups=group1",
      "-mcast-port=0",
      "-classpath=" + appJars.join(":")
}

task schema(type: Exec) {
  commandLine gfxd, "run", "-file=${projectDir}/scripts/schema-${flavor}.sql"
}
schema.mustRunAfter startServer

task setupLoadAveragesSql(type: Copy) {
    // Always run, as the copy is dependent on expanding properties
    outputs.upToDateWhen {
        false
    }
    File data = file("${projectDir}/data/load_averages-10.csv")
    File sql = file("${projectDir}/scripts/import_load_averages.sql")
    from(sql)
    into("/tmp/demo/")
    expand(load_averages_csv: data.path)
}

task loadAverages(type: Exec, dependsOn: [setupLoadAveragesSql]) {
  commandLine gfxd, "run", "-file=/tmp/demo/import_load_averages.sql"
}
loadAverages.mustRunAfter schema, setupLoadAveragesSql

task cycle(type: Task, dependsOn: [loadAverages, schema, startServer])


task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
  gradleVersion = '1.10'
}
